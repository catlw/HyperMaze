//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Apr 01 2017 22:48:08]
// Generate from:
//   [github.com/vipally/gx/stl/gp/stack.gp.go]
//   [github.com/vipally/gx/stl/gp/gp.gpg] [GOGP_REVERSE_stack]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : 
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

//#GOGP_REQUIRE(github.com/vipally/gogp/lib/fakedef,_)

////////////////////////////////////////////////////////////////////////////////

//stack object
type <GLOBAL_NAME_PREFIX>Stack struct {
	d []<VALUE_TYPE>
}

//new object
func NewGOGPStackNamePrefixStack(bufSize int) *<GLOBAL_NAME_PREFIX>Stack {
	r := &<GLOBAL_NAME_PREFIX>Stack{}
	r.Init(bufSize)
	return r
}

//init
func (this *<GLOBAL_NAME_PREFIX>Stack) Init(bufSize int) {
	if nil == this.d {
		if -1 == bufSize {
			bufSize = 10
		}
		if bufSize > 0 {
			this.d = make([]<VALUE_TYPE>, 0, bufSize)
		}
	}
	this.d = this.d[:0]
	return
}

//clear
func (this *<GLOBAL_NAME_PREFIX>Stack) Clear() {
	this.Init(-1)
}

//push v to top of stack
func (this *<GLOBAL_NAME_PREFIX>Stack) Push(v <VALUE_TYPE>) (ok bool) {
	if ok = true; ok {
		this.d = append(this.d, v)
	}
	return
}

//pop top of stack
func (this *<GLOBAL_NAME_PREFIX>Stack) Pop() (top <VALUE_TYPE>, ok bool) {
	if top, ok = this.Top(); ok {
		this.d = this.d[:this.Size()-1]
	}
	return
}

//get top of stack
func (this *<GLOBAL_NAME_PREFIX>Stack) Top() (top <VALUE_TYPE>, ok bool) {
	d := this.Size()
	if d > 0 {
		top = this.d[d-1]
		ok = true
	}
	return

}

//size of stack
func (this *<GLOBAL_NAME_PREFIX>Stack) Size() int {
	return len(this.d)
}

//is stack is empty
func (this *<GLOBAL_NAME_PREFIX>Stack) Empty() bool {
	return this.Size() == 0
}

////show
//func (this *<GLOBAL_NAME_PREFIX>Stack) Show() string {
//	var b show_bytes.Buffer
//	b.WriteByte('[')
//	for _, v := range this.d {
//		b.WriteString(v.Show())
//		b.WriteByte(',')
//	}
//	if this.Size() > 0 {
//		b.Truncate(b.Len() - 1) //remove last ','
//	}
//	b.WriteByte(']')
//	return b.String()
//} //

