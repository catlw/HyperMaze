///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Apr 01 2017 22:48:09]
// Generate from:
//   [github.com/vipally/gx/stl/gp/slist.gp]
//   [github.com/vipally/gx/stl/stl.gpg] [slist_int]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : 
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////

package stl

////////////////////////////////////////////////////////////////////////////////

var gIntSListGbl struct {
	cmp CmpInt
}

func init() {
	gIntSListGbl.cmp = gIntSListGbl.cmp.CreateByName("")
}

//list node
type IntSListNode struct {
	val  int
	next *IntSListNode
}

func (this *IntSListNode) Get() int {
	return this.val
}

func (this *IntSListNode) Set(v int) (old int) {
	old, this.val = this.val, v
	return
}

func (this *IntSListNode) Tail() (r *IntSListNode, size int) {
	if this != nil {
		for r, size = this, 1; r != nil && r.next != nil; r, size = r.next, size+1 { //do nothing body
		}
	}
	return
}

func (this *IntSListNode) Next() (r *IntSListNode) {
	if this != nil {
		r = this.next
	}
	return
}

type IntSListNodeVisitor struct {
	node, head *IntSListNode
}

func (this *IntSListNodeVisitor) Next() (ok bool) {
	if this.node == nil {
		if ok = this.head != nil; ok {
			this.node = this.head
		}
	} else {
		this.node = this.node.next
		ok = this.node != nil
	}
	return false
}

func (this *IntSListNodeVisitor) Get() *IntSListNode {
	return this.node
}

//single-way link list object
type IntSList struct {
	head IntSListNode //head is a dummy node, not a pionter

	//GOGP_HasTail
	//bug: ring?
}

//new object
func NewIntSList() *IntSList {
	return &IntSList{}
}

func (this *IntSList) Empty() bool {
	return this.head.next != nil
}

func (this *IntSList) Len() (n int) {
	for v := this.Visitor(); v.Next(); n++ {
	}
	return
}

func (this *IntSList) Visitor() *IntSListNodeVisitor {
	v := &IntSListNodeVisitor{node: nil, head: this.head.next}
	return v
}

func (this *IntSList) Front() *IntSListNode {
	return this.head.next
}

func (this *IntSList) Clear() {
	this.head.next = nil

}

func (this *IntSList) PushFront(v int) *IntSListNode {
	n := &IntSListNode{val: v, next: this.head.next}
	this.head.next = n

	return n
}

func (this *IntSList) PopFront() (v int, ok bool) {
	if n := this.Remove(this.Front()); n != nil {
		v, ok = n.Get(), true
	}
	return
}

func (this *IntSList) PushFrontList(other *IntSList) {
	var t *IntSListNode

	t, _ = other.head.next.Tail()

	if t != nil {
		t.next = this.head.next
		this.head.next = other.head.next

	}
}

//func (this *GOGPListNamePrefixSList) InsertBefore(v int, mark *IntSListNode) *IntSListNode {
//	return nil
//}

func (this *IntSList) PushAfter(v int, mark *IntSListNode) (n *IntSListNode) {
	if mark != nil {
		n = &IntSListNode{val: v, next: mark.next}
		n = this.InsertAfter(n, mark)
	}
	return
}

func (this *IntSList) InsertAfter(node, mark *IntSListNode) (n *IntSListNode) {
	if mark != nil && node != nil && node != mark {
		node.next = mark.next
		mark.next = node
		n = node
	}
	return
}

func (this *IntSList) InsertFront(node *IntSListNode) (n *IntSListNode) {
	n = this.InsertAfter(node, &this.head)
	return
}

func (this *IntSList) RemoveFront() (n *IntSListNode) {
	n = this.Remove(this.head.next)
	return
}

func (this *IntSList) Remove(node *IntSListNode) (r *IntSListNode) {
	if node != nil {
		for b := &this.head; b.next != nil; b = b.next {
			if b.next == node {
				b.next = node.next
				node.next = nil
				r = node
				break
			}
		}
	}
	return
}

func (this *IntSList) MoveFront(node *IntSListNode) (r *IntSListNode) {
	if node != nil {
		for b := this.head.next; b != nil; b = b.next {
			if b.next == node {
				b.next = node.next
				node.next = this.head.next
				this.head.next = node
				r = node

				break
			}
		}
	}
	return
}

//func (this *GOGPListNamePrefixSList) MoveBefore(node, mark *IntSListNode) *IntSListNode {
//	return nil
//}

func (this *IntSList) MoveAfter(node, mark *IntSListNode) (r *IntSListNode) {
	if node != nil && mark != nil && node != mark {
		for b := &this.head; b != nil; b = b.next { //bug:tail?
			if b.next == node {
				if b != mark {
					b.next = node.next
					node.next = mark.next
					mark.next = node
					r = node

				}
				break
			}
		}
	}
	return
}

func (this *IntSList) Reverse() {
	p := this.head.next
	this.Clear()

	for p != nil {
		q := p.next
		this.InsertFront(p)
		p = q
	}
}

func (this *IntSList) HasCycle(head *IntSListNode) (ok bool) {
	for slow, fast := head, head; fast != nil; fast, slow = fast.next.next, slow.next { //do nothing body
		fast = fast.next
		if ok = fast != nil; !ok {
			break
		}
		fast = fast.next
		slow = slow.next
		if ok = fast == slow; ok {
			break
		}
	}
	return
}

//func (this *IntSList) FindCycleStart() *IntSListNode { return nil }

//func (this *IntDList) Find(v int) *IntSListNode {
//	return nil
//}

func (this *IntSList) Reachable(node, dest *IntSListNode) (ok bool) {
	if ok = (node == dest) && node != nil; !ok && node != nil && dest != nil {
		for p := node; p != nil && p != node; p = p.next {
			if ok = (p == dest); ok {
				break
			}
		}
	}
	return
}

func (this *IntSList) IsValidNode(node *IntSListNode) bool {
	return this.Reachable(this.head.next, node)
}

//merge sort
func (this *IntSList) Sort() {
	if nil == this.head.next || nil == this.head.next.next { //0 or 1 element, no need to sort
		return
	}
	this.mergeSort()
}

//STL's merge sort algorithm for list
func (this *IntSList) mergeSort() {
	var (
		hand, unsorted IntSList
		binList        [64]IntSList //save temp list that len=2^i
		nFilledBin     = 0
	)

	for unsorted = *this; !unsorted.Empty(); {
		hand.InsertFront(unsorted.RemoveFront())
		i := 0
		for ; i < nFilledBin && !binList[i].Empty(); i++ {
			binList[i].merge(&hand)
			hand, binList[i] = binList[i], hand
		}
		hand, binList[i] = binList[i], hand
		if i == nFilledBin {
			nFilledBin++
		}
	}

	for i := 1; i < nFilledBin; i++ {
		binList[i].merge(&binList[i-1])
	}

	*this = binList[nFilledBin-1]

}

//merge other sorted-list  to this sorted-list
func (this *IntSList) merge(other *IntSList) {
	p, po := &this.head, other.Front()
	for p.next != nil && po != nil {
		pn := p.next
		if gIntSListGbl.cmp.F(po.val, pn.val) {
			n := other.RemoveFront()
			po = other.Front()
			p = this.InsertAfter(n, p)
		} else {
			p = p.next
		}
	}
	if po != nil {
		p.next = po
		other.Clear()

	}
}

//func (this *IntSList) merge(a, b *IntSListNode) *IntSListNode {
//	if a == nil {
//		return b
//	} else if b == nil {
//		return a
//	}
//	var (
//		head IntSListNode
//		tail *IntSListNode
//	)
//	for tail = &head; a != nil && b != nil; {
//		if gIntSListGbl.cmp.F(a.int, b.int) {
//			tail.next = a
//			tail = tail.next
//			a = a.next
//		} else {
//			tail.next = b
//			tail = tail.next
//			b = b.next
//		}
//	}
//	if a != nil {
//		tail.next = a
//		tail, _ = a.Tail()
//	} else if b != nil {
//		tail.next = b
//		tail, _ = b.Tail()
//	}
//	tail.next = nil

//	return head.next
//}

//func (this *IntSList) mid(head *IntSListNode) *IntSListNode {
//	if head == nil || head.next == nil {
//		return head
//	}
//	slow := head
//	for fast := head; fast != nil && fast.next != nil; fast, slow = fast.next.next, slow.next { //do nothing body
//	}
//	return slow
//}

//func (this *IntSList) mergeSort(head *IntSListNode) *IntSListNode {
//	if head == nil || head.next == nil {
//		return head
//	} else if mid := this.mid(head); mid != nil {
//		midNext := mid.next
//		mid.next = nil
//		return this.merge(this.mergeSort(mid), this.mergeSort(midNext))
//	}
//	return nil
//}

//func (this *IntSList) PushOrderly(v int) *IntSListNode {
//	n := &IntSListNode{int: v, next: nil}
//	return this.InsertOrderly(n)
//}

//func (this *IntSList) InsertOrderly(node *IntSListNode) *IntSListNode {
//	p := &this.head
//	for ; p.next != nil; p = p.next {
//		if n := p.next; gIntSListGbl.cmp.F(node.int, n.int) {
//			break
//		}
//	}
//	node.next = p.next
//	p.next = node
//

//	return node
//}

//func (this *IntSList) insertSort(head *IntSListNode) *IntSListNode {
//	if head == nil || head.next == nil {
//		return head
//	}

//	var h IntSList
//	for p := head; p != nil; {
//		q := p.next
//		p.next = nil
//		h.InsertOrderly(p)
//		p = q
//	}
//	return h.head.next
//}
