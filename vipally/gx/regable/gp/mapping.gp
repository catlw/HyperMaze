//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Apr 01 2017 22:48:08]
// Generate from:
//   [github.com/vipally/gx/regable/gp/mapping.gp.go]
//   [github.com/vipally/gx/regable/gp/gp.gpg] [GOGP_REVERSE_mapping]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2016 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Blog    : http://blog.csdn.net/vipally
// Site    : https://github.com/vipally
// BuildAt : 
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

import (
	"fmt"
)

//#GOGP_REQUIRE(github.com/vipally/gogp/lib/fakedef,_)

//key/value mapping
type <GLOBAL_NAME_PREFIX>Mapping struct {
	normal  map[<KEY_TYPE>]<VALUE_TYPE>
	reverse map[<VALUE_TYPE>]<KEY_TYPE>
}

type <GLOBAL_NAME_PREFIX>MappingIdType <KEY_TYPE>

func New<GLOBAL_NAME_PREFIX>Mapping() *<GLOBAL_NAME_PREFIX>Mapping {
	p := &<GLOBAL_NAME_PREFIX>Mapping{}
	p.Init()
	return p
}

func (this *<GLOBAL_NAME_PREFIX>Mapping) Init() {
	this.normal = make(map[<KEY_TYPE>]<VALUE_TYPE>)
	this.reverse = make(map[<VALUE_TYPE>]<KEY_TYPE>)
}

//make mapping
func (this *<GLOBAL_NAME_PREFIX>Mapping) Insert(k <KEY_TYPE>, v <VALUE_TYPE>) (id <GLOBAL_NAME_PREFIX>MappingIdType, err error) {
	if _, ok := this.Find(k); ok {
		err = fmt.Errorf("dumplicate key : %#v", k)
		return
	}
	if _, ok := this.ReverseFind(v); ok {
		err = fmt.Errorf("dumplicate value : %#v", v)
		return
	}
	this.normal[k] = v
	this.reverse[v] = k
	return <GLOBAL_NAME_PREFIX>MappingIdType(k), nil
}

//remove by key
func (this *<GLOBAL_NAME_PREFIX>Mapping) RemoveByKey(k <KEY_TYPE>) (ok bool) {
	if v, find := this.Find(k); find {
		ok = find
		delete(this.normal, k)
		delete(this.reverse, v)
	}
	return
}

//remove by value
func (this *<GLOBAL_NAME_PREFIX>Mapping) RemoveByValue(v <VALUE_TYPE>) (ok bool) {
	if k, find := this.ReverseFind(v); find {
		ok = find
		delete(this.normal, k)
		delete(this.reverse, v)
	}
	return
}

//find by key
func (this *<GLOBAL_NAME_PREFIX>Mapping) Find(k <KEY_TYPE>) (v <VALUE_TYPE>, ok bool) {
	v, ok = this.normal[k]
	return
}

//find by value
func (this *<GLOBAL_NAME_PREFIX>Mapping) ReverseFind(v <VALUE_TYPE>) (k <KEY_TYPE>, ok bool) {
	k, ok = this.reverse[v]
	return
}

//clear all mapping
func (this *<GLOBAL_NAME_PREFIX>Mapping) Clear() {
	this.Init()
}

